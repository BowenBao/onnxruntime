#include "core/graph/utils.h"
#include "core/providers/cpu/nn/pool.h"
#include "gtest/gtest.h"
#include "test/providers/provider_test_utils.h"

namespace Lotus {
namespace Test {

static const TypeProto_Set s_typeProto_float{TensorProto_DataType_FLOAT};

TEST(PoolTest, MaxPool) {
  LotusIR::NodeArg x_def("X", &s_typeProto_float),
      output_def("Y", &s_typeProto_float);
  std::vector<LotusIR::NodeArg*> input_defs{&x_def};
  std::vector<LotusIR::NodeArg*> output_defs{&output_def};
  CREATE_NODE("MaxPool", input_defs, output_defs);

  EXPECT_TRUE(node->AddAttribute("auto_pad", ""));
  EXPECT_TRUE(node->AddAttribute("strides", std::vector<int64_t>{1, 1}));
  EXPECT_TRUE(node->AddAttribute("pads", vector<int64_t>{0, 0, 0, 0}));
  EXPECT_TRUE(node->AddAttribute("kernel_shape", vector<int64_t>{8, 8}));

  AllocatorInfo allocator_info(CPU, AllocatorType::kArenaAllocator);
  KernelDefBuilder kernel_builder("MaxPool");
  std::unique_ptr<const KernelDef> kernel_def(kernel_builder.Build());
  OpKernelInfo info(*node, allocator_info, *kernel_def.get());
  Pool<float, MaxPool> kernel(info);

  std::vector<float> x_vals = {0.19151945412158966, 0.6221087574958801, 0.43772774934768677,
                               0.7853586077690125, 0.7799758315086365, 0.27259260416030884,
                               0.2764642536640167, 0.801872193813324, 0.9581393599510193,
                               0.8759326338768005, 0.35781726241111755, 0.5009950995445251,
                               0.683462917804718, 0.7127020359039307, 0.37025076150894165,
                               0.5611962080001831, 0.5030831694602966, 0.013768449425697327,
                               0.772826611995697, 0.8826411962509155, 0.36488598585128784,
                               0.6153962016105652, 0.07538124173879623, 0.3688240051269531,
                               0.9331400990486145, 0.6513781547546387, 0.39720258116722107,
                               0.7887301445007324, 0.3168361186981201, 0.5680986642837524,
                               0.8691273927688599, 0.4361734092235565, 0.802147626876831,
                               0.14376682043075562, 0.7042609453201294, 0.7045813202857971,
                               0.2187921106815338, 0.9248676300048828, 0.44214075803756714,
                               0.9093159437179565, 0.05980922281742096, 0.18428708612918854,
                               0.047355279326438904, 0.6748809218406677, 0.5946247577667236,
                               0.5333101749420166, 0.043324064463377, 0.5614330768585205,
                               0.32966843247413635, 0.5029668211936951, 0.11189431697130203,
                               0.6071937084197998, 0.5659446716308594, 0.006764062214642763,
                               0.617441713809967, 0.912122905254364, 0.7905241250991821,
                               0.9920814633369446, 0.9588017463684082, 0.7919641137123108,
                               0.2852509617805481, 0.6249167323112488, 0.47809380292892456,
                               0.19567517936229706, 0.382317453622818, 0.053873684257268906,
                               0.45164841413497925, 0.9820047616958618, 0.12394270300865173,
                               0.1193808987736702, 0.7385230660438538, 0.587303638458252,
                               0.47163254022598267, 0.10712681710720062, 0.22921857237815857,
                               0.8999651670455933, 0.41675353050231934, 0.5358516573905945,
                               0.0062085166573524475, 0.3006417155265808, 0.43689316511154175,
                               0.6121490001678467, 0.9181980490684509, 0.625736653804779,
                               0.7059975862503052, 0.14983370900154114, 0.7460634112358093,
                               0.8310070037841797, 0.6337257623672485, 0.4383098781108856,
                               0.15257278084754944, 0.5684096217155457, 0.5282242894172668,
                               0.9514287710189819, 0.48035916686058044, 0.5025595426559448,
                               0.5368781685829163, 0.8192020654678345, 0.05711563676595688,
                               0.6694217324256897, 0.7671166062355042, 0.7081153392791748,
                               0.7968671917915344, 0.5577608346939087, 0.9658365249633789,
                               0.14715689420700073, 0.02964700013399124, 0.5938934683799744,
                               0.11406569927930832, 0.9508098363876343, 0.32570740580558777,
                               0.19361868500709534, 0.4578116536140442, 0.9204025864601135,
                               0.8790691494941711, 0.252615749835968, 0.34800878167152405,
                               0.18258872628211975, 0.9017960429191589, 0.7065281867980957,
                               0.7266584634780884, 0.900087833404541, 0.7791637778282166,
                               0.5991547703742981, 0.29112523794174194, 0.1513952612876892,
                               0.33517464995384216, 0.6575517654418945, 0.07334254682064056,
                               0.055006396025419235, 0.32319480180740356, 0.5904818177223206,
                               0.8538985848426819, 0.2870624363422394, 0.17306722700595856,
                               0.13402120769023895, 0.9946538209915161, 0.1794978678226471,
                               0.3175468146800995, 0.568291425704956, 0.009348574094474316,
                               0.9006485939025879, 0.9772414565086365, 0.5568946599960327,
                               0.08477384597063065, 0.3330024778842926, 0.7284286618232727,
                               0.14243537187576294, 0.5524689555168152, 0.2730432450771332,
                               0.9744951128959656, 0.6677868962287903, 0.2556532919406891,
                               0.1083114966750145, 0.7761807441711426, 0.7824779748916626,
                               0.7616038918495178, 0.9144031405448914, 0.6586228013038635,
                               0.568367600440979, 0.20175568759441376, 0.6982963681221008,
                               0.952195405960083, 0.8899632692337036, 0.9935673475265503,
                               0.8187035322189331, 0.5451221466064453, 0.45125406980514526,
                               0.8905571699142456, 0.9732648134231567, 0.5934113264083862,
                               0.36607450246810913, 0.3230946958065033, 0.8714232444763184,
                               0.2156340628862381, 0.7349451780319214, 0.36561909317970276,
                               0.8016026020050049, 0.7827355861663818, 0.7013553977012634,
                               0.6227765679359436, 0.4936826527118683, 0.8405377268791199,
                               0.7120969891548157, 0.4439089894294739, 0.031034860759973526,
                               0.36323976516723633, 0.7307217717170715, 0.475566565990448,
                               0.3444169759750366, 0.6408804059028625, 0.12620532512664795};
  std::vector<int64_t> x_dims = {1, 3, 8, 8};
  std::vector<int64_t> expected_dims = {1, 3, 1, 1};
  std::vector<float> expected_vals = {0.9920814633369446, 0.9820047616958618, 0.9946538209915161};
  SessionState state;
  state.SetGraph(graph);
  SetupState(state, input_defs, output_defs);

  std::unordered_map<std::string, MLValue> feeds;
  std::vector<std::string> output_names;
  FillFeedsAndOutputNames(input_defs, output_defs, feeds, output_names);

  auto frame = TestUtils::CreateSingleNodeCPUExecutionFrame(state, feeds, output_names);
  auto status = TestUtils::PrepareIthInput<float>(*node, 0, frame, x_dims, &x_vals);
  EXPECT_TRUE(status.IsOK());

  status = TestUtils::PrepareIthOutput<float>(*node, 0, frame, expected_dims);
  EXPECT_TRUE(status.IsOK());

  OpKernelContext kernel_ctx(frame.get(), static_cast<OpKernel*>(&kernel), DefaultLoggingManager().DefaultLogger());
  kernel.Compute(&kernel_ctx);
  auto output = kernel_ctx.Output(0, TensorShape(expected_dims));
  const float* res = output->Data<float>();

  for (int i = 0; i < expected_vals.size(); ++i) {
    EXPECT_EQ(expected_vals[i], res[i]);
  }
}

TEST(PoolTest, GlobalMaxPool) {
  LotusIR::NodeArg x_def("X", &s_typeProto_float),
      output_def("Y", &s_typeProto_float);
  std::vector<LotusIR::NodeArg*> input_defs{&x_def};
  std::vector<LotusIR::NodeArg*> output_defs{&output_def};
  CREATE_NODE("GlobalMaxPool", input_defs, output_defs);

  AllocatorInfo allocator_info(CPU, AllocatorType::kArenaAllocator);
  KernelDefBuilder kernel_builder("GlobalMaxPool");
  std::unique_ptr<const KernelDef> kernel_def(kernel_builder.Build());
  OpKernelInfo info(*node, allocator_info, *kernel_def.get());
  Pool<float, MaxPool> kernel(info);
  std::vector<float> x_vals = {0.19151945412158966, 0.6221087574958801, 0.43772774934768677,
                               0.7853586077690125, 0.7799758315086365, 0.27259260416030884,
                               0.2764642536640167, 0.801872193813324, 0.9581393599510193,
                               0.8759326338768005, 0.35781726241111755, 0.5009950995445251,
                               0.683462917804718, 0.7127020359039307, 0.37025076150894165,
                               0.5611962080001831, 0.5030831694602966, 0.013768449425697327,
                               0.772826611995697, 0.8826411962509155, 0.36488598585128784,
                               0.6153962016105652, 0.07538124173879623, 0.3688240051269531,
                               0.9331400990486145, 0.6513781547546387, 0.39720258116722107,
                               0.7887301445007324, 0.3168361186981201, 0.5680986642837524,
                               0.8691273927688599, 0.4361734092235565, 0.802147626876831,
                               0.14376682043075562, 0.7042609453201294, 0.7045813202857971,
                               0.2187921106815338, 0.9248676300048828, 0.44214075803756714,
                               0.9093159437179565, 0.05980922281742096, 0.18428708612918854,
                               0.047355279326438904, 0.6748809218406677, 0.5946247577667236,
                               0.5333101749420166, 0.043324064463377, 0.5614330768585205,
                               0.32966843247413635, 0.5029668211936951, 0.11189431697130203,
                               0.6071937084197998, 0.5659446716308594, 0.006764062214642763,
                               0.617441713809967, 0.912122905254364, 0.7905241250991821,
                               0.9920814633369446, 0.9588017463684082, 0.7919641137123108,
                               0.2852509617805481, 0.6249167323112488, 0.47809380292892456,
                               0.19567517936229706, 0.382317453622818, 0.053873684257268906,
                               0.45164841413497925, 0.9820047616958618, 0.12394270300865173,
                               0.1193808987736702, 0.7385230660438538, 0.587303638458252,
                               0.47163254022598267, 0.10712681710720062, 0.22921857237815857,
                               0.8999651670455933, 0.41675353050231934, 0.5358516573905945,
                               0.0062085166573524475, 0.3006417155265808, 0.43689316511154175,
                               0.6121490001678467, 0.9181980490684509, 0.625736653804779,
                               0.7059975862503052, 0.14983370900154114, 0.7460634112358093,
                               0.8310070037841797, 0.6337257623672485, 0.4383098781108856,
                               0.15257278084754944, 0.5684096217155457, 0.5282242894172668,
                               0.9514287710189819, 0.48035916686058044, 0.5025595426559448,
                               0.5368781685829163, 0.8192020654678345, 0.05711563676595688,
                               0.6694217324256897, 0.7671166062355042, 0.7081153392791748,
                               0.7968671917915344, 0.5577608346939087, 0.9658365249633789,
                               0.14715689420700073, 0.02964700013399124, 0.5938934683799744,
                               0.11406569927930832, 0.9508098363876343, 0.32570740580558777,
                               0.19361868500709534, 0.4578116536140442, 0.9204025864601135,
                               0.8790691494941711, 0.252615749835968, 0.34800878167152405,
                               0.18258872628211975, 0.9017960429191589, 0.7065281867980957,
                               0.7266584634780884, 0.900087833404541, 0.7791637778282166,
                               0.5991547703742981, 0.29112523794174194, 0.1513952612876892,
                               0.33517464995384216, 0.6575517654418945, 0.07334254682064056,
                               0.055006396025419235, 0.32319480180740356, 0.5904818177223206,
                               0.8538985848426819, 0.2870624363422394, 0.17306722700595856,
                               0.13402120769023895, 0.9946538209915161, 0.1794978678226471,
                               0.3175468146800995, 0.568291425704956, 0.009348574094474316,
                               0.9006485939025879, 0.9772414565086365, 0.5568946599960327,
                               0.08477384597063065, 0.3330024778842926, 0.7284286618232727,
                               0.14243537187576294, 0.5524689555168152, 0.2730432450771332,
                               0.9744951128959656, 0.6677868962287903, 0.2556532919406891,
                               0.1083114966750145, 0.7761807441711426, 0.7824779748916626,
                               0.7616038918495178, 0.9144031405448914, 0.6586228013038635,
                               0.568367600440979, 0.20175568759441376, 0.6982963681221008,
                               0.952195405960083, 0.8899632692337036, 0.9935673475265503,
                               0.8187035322189331, 0.5451221466064453, 0.45125406980514526,
                               0.8905571699142456, 0.9732648134231567, 0.5934113264083862,
                               0.36607450246810913, 0.3230946958065033, 0.8714232444763184,
                               0.2156340628862381, 0.7349451780319214, 0.36561909317970276,
                               0.8016026020050049, 0.7827355861663818, 0.7013553977012634,
                               0.6227765679359436, 0.4936826527118683, 0.8405377268791199,
                               0.7120969891548157, 0.4439089894294739, 0.031034860759973526,
                               0.36323976516723633, 0.7307217717170715, 0.475566565990448,
                               0.3444169759750366, 0.6408804059028625, 0.12620532512664795};
  std::vector<int64_t> x_dims = {1, 3, 8, 8};
  std::vector<int64_t> expected_dims = {1, 3, 1, 1};
  std::vector<float> expected_vals = {0.9920814633369446, 0.9820047616958618, 0.9946538209915161};
  SessionState state;
  state.SetGraph(graph);
  SetupState(state, input_defs, output_defs);

  std::unordered_map<std::string, MLValue> feeds;
  std::vector<std::string> output_names;
  FillFeedsAndOutputNames(input_defs, output_defs, feeds, output_names);

  auto frame = TestUtils::CreateSingleNodeCPUExecutionFrame(state, feeds, output_names);
  auto status = TestUtils::PrepareIthInput<float>(*node, 0, frame, x_dims, &x_vals);
  EXPECT_TRUE(status.IsOK());

  status = TestUtils::PrepareIthOutput<float>(*node, 0, frame, expected_dims);
  EXPECT_TRUE(status.IsOK());

  OpKernelContext kernel_ctx(frame.get(), static_cast<OpKernel*>(&kernel), DefaultLoggingManager().DefaultLogger());
  kernel.Compute(&kernel_ctx);
  auto output = kernel_ctx.Output(0, TensorShape(expected_dims));
  const float* res = output->Data<float>();

  for (int i = 0; i < expected_vals.size(); ++i) {
    EXPECT_EQ(expected_vals[i], res[i]);
  }
}

TEST(PoolTest, AveragePool) {
  LotusIR::NodeArg x_def("X", &s_typeProto_float),
      output_def("Y", &s_typeProto_float);
  std::vector<LotusIR::NodeArg*> input_defs{&x_def};
  std::vector<LotusIR::NodeArg*> output_defs{&output_def};
  CREATE_NODE("AveragePool", input_defs, output_defs);

  EXPECT_TRUE(node->AddAttribute("auto_pad", ""));
  EXPECT_TRUE(node->AddAttribute("strides", std::vector<int64_t>{1, 1}));
  EXPECT_TRUE(node->AddAttribute("pads", vector<int64_t>{0, 0, 0, 0}));
  EXPECT_TRUE(node->AddAttribute("kernel_shape", vector<int64_t>{8, 8}));

  AllocatorInfo allocator_info(CPU, AllocatorType::kArenaAllocator);
  KernelDefBuilder kernel_builder("AveragePool");
  std::unique_ptr<const KernelDef> kernel_def(kernel_builder.Build());
  OpKernelInfo info(*node, allocator_info, *kernel_def.get());
  Pool<float, AveragePool> kernel(info);

  std::vector<float> x_vals = {0.3337382376194, 0.8794041872024536, 0.33745908737182617,
                               0.666634202003479, 0.44255536794662476, 0.6473854184150696,
                               0.7674617171287537, 0.8822641968727112, 0.8852233290672302,
                               0.7453723549842834, 0.2818361520767212, 0.8706393241882324,
                               0.5406734347343445, 0.02016347087919712, 0.8047968745231628,
                               0.6037390828132629, 0.6242085099220276, 0.15702469646930695,
                               0.19581079483032227, 0.7122684717178345, 0.06907976418733597,
                               0.5234333872795105, 0.9091887474060059, 0.4319673180580139,
                               0.8100792169570923, 0.10371053218841553, 0.3888828456401825,
                               0.27514228224754333, 0.2670423686504364, 0.04306316748261452,
                               0.36913928389549255, 0.8686641454696655, 0.6307396292686462,
                               0.7112566232681274, 0.25298961997032166, 0.5131869316101074,
                               0.11016560345888138, 0.20159587264060974, 0.43771353363990784,
                               0.7566956877708435, 0.10168474912643433, 0.7238786220550537,
                               0.4961036741733551, 0.9173188209533691, 0.6056748032569885,
                               0.250592976808548, 0.4755987823009491, 0.904503583908081,
                               0.4725301265716553, 0.8506938219070435, 0.13940207660198212,
                               0.9848986864089966, 0.6715511083602905, 0.8943559527397156,
                               0.40052708983421326, 0.0880642905831337, 0.8935731649398804,
                               0.3453705310821533, 0.8090538382530212, 0.19269756972789764,
                               0.03951506316661835, 0.027226323261857033, 0.8117656111717224,
                               0.7711597084999084, 0.8593372702598572, 0.20363913476467133,
                               0.7842649817466736, 0.29195329546928406, 0.5064213871955872,
                               0.7418627142906189, 0.1069103255867958, 0.5893736481666565,
                               0.2143796980381012, 0.15637169778347015, 0.1684667021036148,
                               0.7528857588768005, 0.5846885442733765, 0.9133154153823853,
                               0.6781020760536194, 0.21141840517520905, 0.05769576504826546,
                               0.49993178248405457, 0.2309824675321579, 0.05175522714853287,
                               0.6969341039657593, 0.47234174609184265, 0.11310867220163345,
                               0.6184650659561157, 0.896835207939148, 0.6077945232391357,
                               0.3074592649936676, 0.07904505729675293, 0.048881493508815765,
                               0.24833321571350098, 0.9844338893890381, 0.4520559012889862,
                               0.26799046993255615, 0.7592704892158508, 0.37819114327430725,
                               0.30964234471321106, 0.8839467167854309, 0.0934458002448082,
                               0.379569411277771, 0.09841523319482803, 0.6000676155090332,
                               0.7950544357299805, 0.45938217639923096, 0.5537487864494324,
                               0.38861554861068726, 0.4074040949344635, 0.38612639904022217,
                               0.89164137840271, 0.21732182800769806, 0.6711451411247253,
                               0.5769082307815552, 0.9865275621414185, 0.03840707615017891,
                               0.1573856621980667, 0.09340689331293106, 0.9288106560707092,
                               0.16059239208698273, 0.8247162103652954, 0.422741562128067,
                               0.987165629863739, 0.9476590752601624, 0.9242128133773804,
                               0.9987634420394897, 0.32882997393608093, 0.011870949529111385,
                               0.984099805355072, 0.09365611523389816, 0.33463314175605774,
                               0.6386845111846924, 0.9860017895698547, 0.4672822654247284,
                               0.9529699683189392, 0.15891511738300323, 0.7175184488296509,
                               0.024524977430701256, 0.8217390179634094, 0.14411452412605286,
                               0.45218998193740845, 0.4429023861885071, 0.9931989312171936,
                               0.8507111072540283, 0.13051295280456543, 0.07811085134744644,
                               0.943297803401947, 0.030969098210334778, 0.21649038791656494,
                               0.9491124749183655, 0.5731316804885864, 0.5927708745002747,
                               0.7653813362121582, 0.5627018809318542, 0.01101104449480772,
                               0.7299126982688904, 0.3900069296360016, 0.0853394865989685,
                               0.43255582451820374, 0.8431127071380615, 0.5303983092308044,
                               0.6451488137245178, 0.16481569409370422, 0.35921016335487366,
                               0.036783039569854736, 0.5699883103370667, 0.5847001075744629,
                               0.9650961756706238, 0.9053892493247986, 0.2933308482170105,
                               0.2615077495574951, 0.48302537202835083, 0.5642899870872498,
                               0.20961439609527588, 0.37418732047080994, 0.4921484887599945,
                               0.7827269434928894, 0.28503814339637756, 0.4663805067539215,
                               0.1988927721977234, 0.20202897489070892, 0.3183555603027344,
                               0.4528728425502777, 0.2815922796726227, 0.820142388343811,
                               0.4963360130786896, 0.46687841415405273, 0.7405545115470886,
                               0.40191709995269775, 0.21238186955451965, 0.46927347779273987};
  std::vector<int64_t> x_dims = {1, 3, 8, 8};
  std::vector<int64_t> expected_dims = {1, 3, 1, 1};
  std::vector<float> expected_vals = {0.5146896243095398, 0.4851023256778717, 0.4756942689418793};
  SessionState state;
  state.SetGraph(graph);
  SetupState(state, input_defs, output_defs);

  std::unordered_map<std::string, MLValue> feeds;
  std::vector<std::string> output_names;
  FillFeedsAndOutputNames(input_defs, output_defs, feeds, output_names);

  auto frame = TestUtils::CreateSingleNodeCPUExecutionFrame(state, feeds, output_names);
  auto status = TestUtils::PrepareIthInput<float>(*node, 0, frame, x_dims, &x_vals);
  EXPECT_TRUE(status.IsOK());

  status = TestUtils::PrepareIthOutput<float>(*node, 0, frame, expected_dims);
  EXPECT_TRUE(status.IsOK());

  OpKernelContext kernel_ctx(frame.get(), static_cast<OpKernel*>(&kernel), DefaultLoggingManager().DefaultLogger());
  kernel.Compute(&kernel_ctx);
  auto output = kernel_ctx.Output(0, TensorShape(expected_dims));
  const float* res = output->Data<float>();

  for (int i = 0; i < expected_vals.size(); ++i) {
    EXPECT_EQ(expected_vals[i], res[i]);
  }
}

TEST(PoolTest, GlobalAveragePool) {
  LotusIR::NodeArg x_def("X", &s_typeProto_float),
      output_def("Y", &s_typeProto_float);
  std::vector<LotusIR::NodeArg*> input_defs{&x_def};
  std::vector<LotusIR::NodeArg*> output_defs{&output_def};
  CREATE_NODE("GlobalAveragePool", input_defs, output_defs);

  AllocatorInfo allocator_info(CPU, AllocatorType::kArenaAllocator);
  KernelDefBuilder kernel_builder("GlobalAveragePool");
  std::unique_ptr<const KernelDef> kernel_def(kernel_builder.Build());
  OpKernelInfo info(*node, allocator_info, *kernel_def.get());
  Pool<float, AveragePool> kernel(info);
  std::vector<float> x_vals = {0.3337382376194, 0.8794041872024536, 0.33745908737182617,
                               0.666634202003479, 0.44255536794662476, 0.6473854184150696,
                               0.7674617171287537, 0.8822641968727112, 0.8852233290672302,
                               0.7453723549842834, 0.2818361520767212, 0.8706393241882324,
                               0.5406734347343445, 0.02016347087919712, 0.8047968745231628,
                               0.6037390828132629, 0.6242085099220276, 0.15702469646930695,
                               0.19581079483032227, 0.7122684717178345, 0.06907976418733597,
                               0.5234333872795105, 0.9091887474060059, 0.4319673180580139,
                               0.8100792169570923, 0.10371053218841553, 0.3888828456401825,
                               0.27514228224754333, 0.2670423686504364, 0.04306316748261452,
                               0.36913928389549255, 0.8686641454696655, 0.6307396292686462,
                               0.7112566232681274, 0.25298961997032166, 0.5131869316101074,
                               0.11016560345888138, 0.20159587264060974, 0.43771353363990784,
                               0.7566956877708435, 0.10168474912643433, 0.7238786220550537,
                               0.4961036741733551, 0.9173188209533691, 0.6056748032569885,
                               0.250592976808548, 0.4755987823009491, 0.904503583908081,
                               0.4725301265716553, 0.8506938219070435, 0.13940207660198212,
                               0.9848986864089966, 0.6715511083602905, 0.8943559527397156,
                               0.40052708983421326, 0.0880642905831337, 0.8935731649398804,
                               0.3453705310821533, 0.8090538382530212, 0.19269756972789764,
                               0.03951506316661835, 0.027226323261857033, 0.8117656111717224,
                               0.7711597084999084, 0.8593372702598572, 0.20363913476467133,
                               0.7842649817466736, 0.29195329546928406, 0.5064213871955872,
                               0.7418627142906189, 0.1069103255867958, 0.5893736481666565,
                               0.2143796980381012, 0.15637169778347015, 0.1684667021036148,
                               0.7528857588768005, 0.5846885442733765, 0.9133154153823853,
                               0.6781020760536194, 0.21141840517520905, 0.05769576504826546,
                               0.49993178248405457, 0.2309824675321579, 0.05175522714853287,
                               0.6969341039657593, 0.47234174609184265, 0.11310867220163345,
                               0.6184650659561157, 0.896835207939148, 0.6077945232391357,
                               0.3074592649936676, 0.07904505729675293, 0.048881493508815765,
                               0.24833321571350098, 0.9844338893890381, 0.4520559012889862,
                               0.26799046993255615, 0.7592704892158508, 0.37819114327430725,
                               0.30964234471321106, 0.8839467167854309, 0.0934458002448082,
                               0.379569411277771, 0.09841523319482803, 0.6000676155090332,
                               0.7950544357299805, 0.45938217639923096, 0.5537487864494324,
                               0.38861554861068726, 0.4074040949344635, 0.38612639904022217,
                               0.89164137840271, 0.21732182800769806, 0.6711451411247253,
                               0.5769082307815552, 0.9865275621414185, 0.03840707615017891,
                               0.1573856621980667, 0.09340689331293106, 0.9288106560707092,
                               0.16059239208698273, 0.8247162103652954, 0.422741562128067,
                               0.987165629863739, 0.9476590752601624, 0.9242128133773804,
                               0.9987634420394897, 0.32882997393608093, 0.011870949529111385,
                               0.984099805355072, 0.09365611523389816, 0.33463314175605774,
                               0.6386845111846924, 0.9860017895698547, 0.4672822654247284,
                               0.9529699683189392, 0.15891511738300323, 0.7175184488296509,
                               0.024524977430701256, 0.8217390179634094, 0.14411452412605286,
                               0.45218998193740845, 0.4429023861885071, 0.9931989312171936,
                               0.8507111072540283, 0.13051295280456543, 0.07811085134744644,
                               0.943297803401947, 0.030969098210334778, 0.21649038791656494,
                               0.9491124749183655, 0.5731316804885864, 0.5927708745002747,
                               0.7653813362121582, 0.5627018809318542, 0.01101104449480772,
                               0.7299126982688904, 0.3900069296360016, 0.0853394865989685,
                               0.43255582451820374, 0.8431127071380615, 0.5303983092308044,
                               0.6451488137245178, 0.16481569409370422, 0.35921016335487366,
                               0.036783039569854736, 0.5699883103370667, 0.5847001075744629,
                               0.9650961756706238, 0.9053892493247986, 0.2933308482170105,
                               0.2615077495574951, 0.48302537202835083, 0.5642899870872498,
                               0.20961439609527588, 0.37418732047080994, 0.4921484887599945,
                               0.7827269434928894, 0.28503814339637756, 0.4663805067539215,
                               0.1988927721977234, 0.20202897489070892, 0.3183555603027344,
                               0.4528728425502777, 0.2815922796726227, 0.820142388343811,
                               0.4963360130786896, 0.46687841415405273, 0.7405545115470886,
                               0.40191709995269775, 0.21238186955451965, 0.46927347779273987};
  std::vector<int64_t> x_dims = {1, 3, 8, 8};
  std::vector<int64_t> expected_dims = {1, 3, 1, 1};
  std::vector<float> expected_vals = {0.5146896243095398, 0.4851023256778717, 0.4756942689418793};
  SessionState state;
  state.SetGraph(graph);
  SetupState(state, input_defs, output_defs);

  std::unordered_map<std::string, MLValue> feeds;
  std::vector<std::string> output_names;
  FillFeedsAndOutputNames(input_defs, output_defs, feeds, output_names);

  auto frame = TestUtils::CreateSingleNodeCPUExecutionFrame(state, feeds, output_names);
  auto status = TestUtils::PrepareIthInput<float>(*node, 0, frame, x_dims, &x_vals);
  EXPECT_TRUE(status.IsOK());

  status = TestUtils::PrepareIthOutput<float>(*node, 0, frame, expected_dims);
  EXPECT_TRUE(status.IsOK());

  OpKernelContext kernel_ctx(frame.get(), static_cast<OpKernel*>(&kernel), DefaultLoggingManager().DefaultLogger());
  kernel.Compute(&kernel_ctx);
  auto output = kernel_ctx.Output(0, TensorShape(expected_dims));
  const float* res = output->Data<float>();

  for (int i = 0; i < expected_vals.size(); ++i) {
    EXPECT_EQ(expected_vals[i], res[i]);
  }
}

}  // namespace Test
}  // namespace Lotus
