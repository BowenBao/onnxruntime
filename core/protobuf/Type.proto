syntax = "proto2";

package LotusIR;

import "core/protobuf/Data.proto";

// Defines the type system.
message TypeProto {
  // Defines a tensor shape. A dimension can be either an integer value
  // or a symbolic variable. A symbolic variable represents an unknown
  // dimension.
  message TensorShapeProto {
    message Dimension {
      oneof value {
        int64 dim_value = 1;
        string dim_param = 2;   // namespace Shape
      };
    };
    repeated Dimension dim = 1;
  }

  message TensorTypeProto {
  // This field MUST NOT have the value of UNDEFINED
  // This field MUST be present for this version of the IR.
    optional TensorProto.DataType elem_type = 1;
    optional TensorShapeProto shape = 2; 
  }

  message SparseTensorTypeProto {
  // This field MUST NOT have the value of UNDEFINED
  // This field MUST be present for this version of the IR.
    optional TensorProto.DataType elem_type = 1;
    optional TensorShapeProto shape = 2; 
  }

  message HandleTypeProto {
  };

  message TupleTypeProto {
    repeated TypeProto elem_type = 1;
  };

  message SeqTypeProto {
  // This field MUST be present for this version of the IR.
    optional TypeProto elem_type = 1;
  };

  message MapTypeProto {
  // This field MUST be present for this version of the IR.
  // This field MUST refer to an integral type ([U]INT{8|16|32|64}) or STRING
    optional TensorProto.DataType key_type = 1;
  // This field MUST be present for this version of the IR.
  // This field MUST NOT refer to UNDEFINED
    optional TensorProto.DataType value_type = 2;
  };
      
  oneof value {
    // The type of a tensor.
    TensorTypeProto tensor_type = 1;

    // The type of a sparse tensor.
    SparseTensorTypeProto sparse_tensor_type = 2;

    // The type of an opaque handle. A handle is used to represent a
    // reference to a resource managed by the framework runtime.
    HandleTypeProto handle_type = 3;

    // The type of a tuple.
    TupleTypeProto tuple_type = 4;

    // The type of a sequence.
    SeqTypeProto seq_type = 5;

    // The type of a map.
    MapTypeProto map_type = 6;
  }
}
